# install PCNNs and simulation setup
#!pip install git+https://github.com/GilianPonte/PrivateTargeting.git -q

import os
import pandas as pd
import numpy as np
import random
import tensorflow
import strategy1
import time


def set_seed(seed):
    random.seed(seed)
    tensorflow.random.set_seed(seed)
    np.random.seed(seed)
    tensorflow.keras.utils.set_random_seed(seed)


def main(seed, datafile, noise_multiplier, start=0, stop=1):

    print(f"{seed=} {datafile=} {noise_multiplier=} {start=} {stop=}")

    # set time
    start_time = time.time()
    tensorflow.config.experimental.enable_op_determinism()

    # simulation parameters
    results_list = []


    # Read simulation data, as generated by simulation_data.py
    data = pd.read_csv(datafile)
    # Separate the columns into different DataFrames
    x = data[['covariate_1', 'covariate_2', 'covariate_3', 'covariate_4', 'covariate_5', 'covariate_6']]
    n = len(x)
    w, m, tau, mu1, mu0, y = data[['w']], data[['m']], data[['tau']], data[['mu1']], data[['mu0']], data[['y']]

    # Define the directory based on the noise multiplier
    directory = f"tuner_{noise_multiplier}_iteration_algo_run"
    os.makedirs(directory, exist_ok=True)  # Create the directory if it doesn't exist

    # Create meta-random for generating seeds
    metanoise = random.Random(seed)
    def next_seed():
        return metanoise.randrange(0, 1<<32)
    # Forward the meta-random so each iteration gets a fixed but (likely) distinct seed
    for _ in range(start):
        next_seed()

    for i in range(start, stop):
        set_seed(next_seed())

        # Call the function with the current noise_multiplier value
        if noise_multiplier == 0:
          print("no privacy")
          average_treatment_effect, CATE_estimates, tau_hat = strategy1.cnn(
              X=x,
              Y=y,
              T=w,
              scaling=True,
              batch_size=100,
              epochs=100,
              max_epochs=10,
              folds=10,
              directory=directory
          )
          epsilon = 0
          epsilon_conservative = 0
        else:
          average_treatment_effect, CATE_estimates, tau_hat, n, epsilon, noise_multiplier, epsilon_conservative = strategy1.pcnn(
              X=x,
              Y=y,
              T=w,
              scaling=True,
              batch_size=100,
              epochs=100,
              max_epochs=10,
              fixed_model=True,
              directory=directory,  # Use the directory variable here
              noise_multiplier=noise_multiplier
          )
        # Append the results to the list
        results_list.append({
            'Noise Multiplier': noise_multiplier,
            'Average Treatment Effect': average_treatment_effect,
            'CATE Estimates': CATE_estimates,
            'Epsilon': epsilon,
            'epsilon conservative': epsilon_conservative,
            'true ate': data[['tau']].mean(),
            'true CATE': data[['tau']],
            'sample size': n,
            'data set': i,
            #'iteration': a,
            'covariates' : x,
            'y': y,
            'w': w,
          })

        np.save(f"results_list_{noise_multiplier}", results_list)

        # Print or use the DataFrames as needed
        print(results_list)
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution time one sim: {:.2f} seconds".format(execution_time))


if __name__ == '__main__':
    import sys

    assert len(sys.argv) == 6, "Usage: [seed] [datafile] [noise_multiplier] [start] [stop]"
    seed = int(sys.argv[1])
    datafile = sys.argv[2]
    noise_multiplier = float(sys.argv[3])
    start = int(sys.argv[4])
    stop = int(sys.argv[5])

    main(seed=seed, datafile=datafile, noise_multiplier=noise_multiplier, start=start, stop=stop)
